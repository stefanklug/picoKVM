#include <map>
#include <vector>
#include <rfb/keysym.h>
#include "usb_hid_keys.h"

/* This is a rather silly mapping of vnc Keys to USB keycodes depending on shift and altgr. 
This could be autogenerated in a more intelligent way based on 
https://github.com/qemu/qemu/tree/master/pc-bios/keymaps
*/

#define KM_SHIFT  0x010000
#define KM_ALTGR  0x020000


std::vector<std::vector<uint32_t>> vncScanToHIDList_de = {
    {XK_Escape, KEY_ESC},

    {XK_dead_circumflex, KEY_GRAVE},
    {XK_1,          KM_SHIFT | XK_exclam        , KM_ALTGR | XK_onesuperior  , KEY_1},
    {XK_2,          KM_SHIFT | XK_quotedbl      , KM_ALTGR | XK_twosuperior  , KEY_2},
    {XK_3,          KM_SHIFT | XK_section       , KM_ALTGR | XK_threesuperior, KEY_3},
    {XK_4,          KM_SHIFT | XK_dollar        , KM_ALTGR | XK_onequarter   , KEY_4},
    {XK_5,          KM_SHIFT | XK_percent       , KM_ALTGR | XK_onehalf      , KEY_5},
    {XK_6,          KM_SHIFT | XK_ampersand     , KM_ALTGR | XK_notsign      , KEY_6},
    {XK_7,          KM_SHIFT | XK_slash         , KM_ALTGR | XK_braceleft    , KEY_7},
    {XK_8,          KM_SHIFT | XK_parenleft     , KM_ALTGR | XK_bracketleft  , KEY_8},
    {XK_9,          KM_SHIFT | XK_parenright    , KM_ALTGR | XK_bracketright , KEY_9},
    {XK_0,          KM_SHIFT | XK_equal         , KM_ALTGR | XK_braceright   , KEY_0},
    {XK_ssharp,     KM_SHIFT | XK_question      , KM_ALTGR | XK_backslash    , KEY_MINUS},
    {XK_dead_acute, KM_SHIFT | XK_dead_grave    , KM_ALTGR | XK_dead_grave   , KEY_EQUAL},

    {XK_BackSpace, KEY_BACKSPACE},

    {XK_Tab,        KM_SHIFT | XK_ISO_Left_Tab  , KM_ALTGR | XK_ISO_Left_Tab , KEY_TAB},
    {XK_q,          KM_SHIFT | XK_Q             , KM_ALTGR | XK_at           , KEY_Q},
    {XK_w,          KM_SHIFT | XK_W                                          , KEY_W},
    {XK_e,          KM_SHIFT | XK_E             , KM_ALTGR | XK_EuroSign     , KEY_E},
    {XK_r,          KM_SHIFT | XK_R                                          , KEY_R},
    {XK_t,          KM_SHIFT | XK_T                                          , KEY_T},
    {XK_z,          KM_SHIFT | XK_Z                                          , KEY_Y},
    {XK_u,          KM_SHIFT | XK_U                                          , KEY_U},
    {XK_i,          KM_SHIFT | XK_I                                          , KEY_I},
    {XK_o,          KM_SHIFT | XK_O                                          , KEY_O},
    {XK_p,          KM_SHIFT | XK_P                                          , KEY_P},
    {XK_udiaeresis, KM_SHIFT | XK_Udiaeresis                                 , KEY_LEFTBRACE},
    {XK_plus,       KM_SHIFT | XK_asterisk      , KM_ALTGR | XK_asciitilde   , KEY_RIGHTBRACE},
    
    {XK_Return, KEY_ENTER},

    {XK_a         , KM_SHIFT | XK_A                                          , KEY_A},
    {XK_s         , KM_SHIFT | XK_S                                          , KEY_S},
    {XK_d         , KM_SHIFT | XK_D                                          , KEY_D},
    {XK_f         , KM_SHIFT | XK_F                                          , KEY_F},
    {XK_g         , KM_SHIFT | XK_G                                          , KEY_G},
    {XK_h         , KM_SHIFT | XK_H                                          , KEY_H},
    {XK_j         , KM_SHIFT | XK_J                                          , KEY_J},
    {XK_k         , KM_SHIFT | XK_K                                          , KEY_K},
    {XK_l         , KM_SHIFT | XK_L           , KM_ALTGR | XK_lstroke        , KEY_L},
    {XK_odiaeresis, KM_SHIFT | XK_Odiaeresis                                 , KEY_SEMICOLON},
    {XK_adiaeresis, KM_SHIFT | XK_Adiaeresis                                 , KEY_APOSTROPHE},
    {XK_numbersign, KM_SHIFT | XK_apostrophe                                 , KEY_BACKSLASH},

    {XK_less      , KM_SHIFT | XK_greater     , KM_ALTGR | XK_bar            , KEY_102ND},
    {XK_y         , KM_SHIFT | XK_Y                                          , KEY_Z},
    {XK_x         , KM_SHIFT | XK_X                                          , KEY_X},
    {XK_c         , KM_SHIFT | XK_C                                          , KEY_C},
    {XK_v         , KM_SHIFT | XK_V                                          , KEY_V},
    {XK_b         , KM_SHIFT | XK_B                                          , KEY_B},
    {XK_n         , KM_SHIFT | XK_N                                          , KEY_N},
    {XK_m         , KM_SHIFT | XK_M           , KM_ALTGR | XK_mu             , KEY_M},
    {XK_comma     , KM_SHIFT | XK_semicolon                                  , KEY_COMMA},
    {XK_period    , KM_SHIFT | XK_colon                                      , KEY_DOT},
    {XK_minus     , KM_SHIFT | XK_underscore                                 , KEY_SLASH},

    {XK_KP_Multiply, KEY_KPASTERISK},

    {XK_Caps_Lock, KEY_CAPSLOCK},
    {XK_F1, KEY_F1},
    {XK_F2, KEY_F2},
    {XK_F3, KEY_F3},
    {XK_F4, KEY_F4},
    {XK_F5, KEY_F5},
    {XK_F6, KEY_F6},
    {XK_F7, KEY_F7},
    {XK_F8, KEY_F8},
    {XK_F9, KEY_F9},
    {XK_F10, KEY_F10},
    {XK_F11, KEY_F11},
    {XK_F12, KEY_F12},

    {XK_Num_Lock, KEY_NUMLOCK},
    {XK_Scroll_Lock, KEY_SCROLLLOCK},
    {XK_KP_7, KEY_KP7},

    {XK_KP_8, KEY_KP8},
    {XK_KP_9, KEY_KP9},
    {XK_KP_Subtract, KEY_KPMINUS},
    {XK_KP_4, KEY_KP4},
    {XK_KP_5, KEY_KP5},
    {XK_KP_6, KEY_KP6},
    {XK_KP_Add, KEY_KPPLUS},
    {XK_KP_1, KEY_KP1},
    {XK_KP_2, KEY_KP2},
    {XK_KP_3, KEY_KP3},
    {XK_KP_0, KEY_KP0},
    {XK_KP_Separator, KEY_KPDOT},

    {XK_KP_Enter, KEY_KPENTER},

    {XK_KP_Divide, KEY_KPSLASH},
    {XK_Sys_Req, KEY_SYSRQ},

    {XK_Home, KEY_HOME},
    {XK_Up, KEY_UP},
    {XK_Page_Up, KEY_PAGEUP},
    {XK_Left, KEY_LEFT},
    {XK_Right, KEY_RIGHT},
    {XK_End, KEY_END},
    {XK_Down, KEY_DOWN},
    {XK_Page_Down, KEY_PAGEDOWN},
    {XK_Insert, KEY_INSERT},
    {XK_Delete, KEY_DELETE},
    {XK_Pause, KEY_PAUSE},

    {XK_space, KEY_SPACE}
};